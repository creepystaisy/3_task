<!DOCTYPE html><html lang="ru"><head><script>window.currentUser = null;</script><script>window.rateUsdToNative = 71.9531;</script><title itemprop="name">Прототипное наследование</title><link href="/pack/styles.0685ad1e6bfed8977e8f.css" rel="stylesheet"><meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=yes, minimum-scale=1.0"><meta name="apple-mobile-web-app-capable" content="yes"><!-- chrome autotranslate is enabled only for "en" main version--><meta name="google" content="notranslate"><script>if (window.devicePixelRatio > 1) document.cookie = 'pixelRatio=' + window.devicePixelRatio + ';path=/;expires=Tue, 19 Jan 2038 03:14:07 GMT';</script><link href="//fonts.googleapis.com/css?family=Open+Sans:bold,italic,bolditalic" rel="stylesheet"><link rel="apple-touch-icon-precomposed" href="/img/favicon/apple-touch-icon-precomposed.png"><link rel="canonical" href="https://learn.javascript.ru/prototype-inheritance"><meta name="msapplication-TileColor" content="#222A2C"><meta name="msapplication-TileImage" content="/img/favicon/tileicon.png"><link rel="icon" href="/img/favicon/favicon.png"><meta itemprop="image" content="https://learn.javascript.ru/img/site_preview_ru_512x512.png"><meta property="og:title" content="Прототипное наследование"><meta property="og:image" content="https://learn.javascript.ru/img/site_preview_ru_1200x630.png"><meta property="og:image:type" content="image/png"><meta property="og:image:width" content="1200"><meta property="og:image:height" content="630"><meta property="fb:admins" content="100001562528165"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="Прототипное наследование"><meta name="twitter:site" content="@iliakan"><meta name="twitter:creator" content="@iliakan"><meta name="twitter:image" content="https://learn.javascript.ru/img/site_preview_ru_512x512.png"><link rel="prev" href="/prototypes"><link rel="next" href="/function-prototype"><script>window.GA_ID = "UA-2056213-16";</script><script>window.GTM_ID = 'GTM-WD2DZPG'</script><script>window.YANDEX_METRIKA_ID = 17649010;</script><script>window.GoogleAnalyticsObject="ga",window.ga=function(){window.ga.q.push(arguments)},window.ga.q=[],window.ga.l=Date.now(),ga("create",GA_ID,"auto"),window.GTM_ID&&ga("require",GTM_ID),window.currentUser?ga("set","&uid",currentUser.id):ga("set","anonymizeIp",!0),window.addEventListener("error",function(e){var r=(e.filename||e.errorUrl)+": "+(e.lineno||e.errorLine),n=e.stack||e.error&&e.error.stack;ga("send","exception",{exDescription:e.message+" "+r+" "+n,exFatal:!0})});</script><script src="https://www.google-analytics.com/analytics.js" async></script><script>ga('send', 'pageview');</script><script>window.metrika={reachGoal:function(){}},window.yandex_metrika_callbacks=[function(){try{window.metrika=new Ya.Metrika({id:YANDEX_METRIKA_ID,webvisor:!0,clickmap:!0,params:{user:window.currentUser&&window.currentUser.id}}),metrika.trackLinks({delay:150}),window.addEventListener("error",function(r){window.metrika.reachGoal("JSERROR",{src:(r.filename||r.errorUrl)+": "+(r.lineno||r.errorLine),stack:r.stack||r.error&&r.error.stack,message:r.message})})}catch(r){}}];</script><script src="//mc.yandex.ru/metrika/watch.js" async></script><script>window.RECAPTCHA_ID = "6LfmLAEVAAAAAJMykMnf7aY8nkyTRmYi2ynx51R1";</script><script src="/pack/init.0685ad1e6bfed8977e8f.js"></script><script src="/pack/head.0685ad1e6bfed8977e8f.js" defer></script><meta property="og:title" content="Прототипное наследование"><meta property="og:type" content="article"><script src="/pack/tutorial.0685ad1e6bfed8977e8f.js" defer></script><script src="/pack/footer.0685ad1e6bfed8977e8f.js" defer></script></head><body class="no-icons"><script>window.fontTest();</script><div class="page-wrapper page-wrapper_sidebar_on"><!--[if IE]><div style="color:red;text-align:center">Извините, Internet Explorer не поддерживается, пожалуйста используйте более новый браузер.</div><![endif]--><div class="sitetoolbar sitetoolbar_tutorial"><script>window.langs = [{"code":"am","name":"Armenian"},{"code":"ar","name":"Arabic"},{"code":"az","name":"Azerbaijani"},{"code":"bg","name":"Bulgarian"},{"code":"bn","name":"Bengali"},{"code":"ca","name":"Catalan"},{"code":"cs","name":"Czech"},{"code":"de","name":"German"},{"code":"el","name":"Greek"},{"code":"en","name":"English"},{"code":"es","name":"Spanish"},{"code":"fa","name":"Persian (Farsi)"},{"code":"fr","name":"French"},{"code":"hi","name":"Hindi"},{"code":"hu","name":"Hungarian"},{"code":"id","name":"Indonesian"},{"code":"it","name":"Italian"},{"code":"ja","name":"Japanese"},{"code":"ka","name":"Georgian"},{"code":"km","name":"Central Khmer"},{"code":"ko","name":"Korean"},{"code":"lt","name":"Lithuanian"},{"code":"me","name":"Montenegrin"},{"code":"ml","name":"Malayalam"},{"code":"nl","name":"Dutch"},{"code":"no","name":"Norvegian"},{"code":"pa","name":"Punjabi"},{"code":"pl","name":"Polish"},{"code":"pt","name":"Portuguese"},{"code":"ro","name":"Romanian"},{"code":"ru","name":"Russian"},{"code":"si","name":"Sinhala"},{"code":"sk","name":"Slovak"},{"code":"sq","name":"Albanian"},{"code":"ta","name":"Tamil"},{"code":"te","name":"Telugu"},{"code":"test","name":"Test"},{"code":"th","name":"Thai"},{"code":"tk","name":"Turkmen"},{"code":"tr","name":"Turkish"},{"code":"uk","name":"Ukrainian"},{"code":"uz","name":"Uzbek"},{"code":"vi","name":"Vietnamese"},{"code":"zh-hant","name":"Chinese Traditional"},{"code":"zh","name":"Chinese"}];</script><script>window.lang = "ru";</script><script>{let t=navigator.languages||[];t=t.map(t=>t.toLowerCase());let a,o,i=[];for(let a of window.langs)for(let o of t)if(o===a.code||o.startsWith(a.code+"-")){i.push(a);break}if("en"===lang){let t=i.find(t=>"en"!=t.code);t&&"ru"!=t.code&&(a=`\n            According to your browser language headers, you know ${t.name}. Please help to <a href="https://github.com/javascript-tutorial/${t.code}.javascript.info#readme">translate the tutorial</a> into your language!\n            Thank you!\n          `,o="notify-translate-tutorial")}else if("ru"===lang)o="notify-ru-tutorial",a='\n          Новая редакция учебника была недавно переведена с английского.<br>Если что-то не так - пожалуйста, поправьте в <a href="https://github.com/javascript-tutorial/ru.javascript.info">PR на GitHub</a> (ссылка на редактирование слева в сайдбаре статьи).\n          Спасибо!\n        ';else if("tr"==lang)a='The Turkish version is only half-translated yet! Please help us with its translation at <a href="https://github.com/javascript-tutorial/tr.javascript.info">GitHub</a>.',o="notify-tr-tutorial";else{i.find(t=>"en"==t.code)&&(a=`\n            According to your browser headers, you know English. Please help to <a href="https://github.com/javascript-tutorial/${lang}.javascript.info#readme">translate the tutorial</a>.\n            Thank you!\n          `,o="notify-translate-tutorial-local")}if(a){let t=`<div class="notification notification_top notification_info sitetoolbar__notification" style="display:none" id="${o}">\n          <div class="notification__content">${a}</div>\n          <button class="notification__close" title="Close"></button>\n        </div>`;document.write(t),showTopNotification()}}</script><div class="sitetoolbar__content"><div class="sitetoolbar__lang-switcher"><button class="sitetoolbar__dropdown-button" data-dropdown-toggler>RU</button><div class="sitetoolbar__dropdown-wrap"><div class="sitetoolbar__dropdown-body"><div class="sitetoolbar__lang-switcher-body"><div class="supported-langs supported-langs_toolbar"><div class="supported-langs__container"><ul class="supported-langs__list" style="height:200px"><li class="supported-langs__item"><a class="supported-langs__link" href="https://javascript.info/prototype-inheritance"><span class="supported-langs__brief">EN</span><span class="supported-langs__title">English</span></a></li><li class="supported-langs__item"><a class="supported-langs__link" href="https://ja.javascript.info/prototype-inheritance"><span class="supported-langs__brief">JA</span><span class="supported-langs__title">日本語</span></a></li><li class="supported-langs__item"><a class="supported-langs__link" href="https://ko.javascript.info/prototype-inheritance"><span class="supported-langs__brief">KO</span><span class="supported-langs__title">한국어</span></a></li><li class="supported-langs__item supported-langs__item_current"><a class="supported-langs__link" href="https://learn.javascript.ru/prototype-inheritance"><span class="supported-langs__brief">RU</span><span class="supported-langs__title">Русский</span></a></li><li class="supported-langs__item"><a class="supported-langs__link" href="https://tr.javascript.info/prototype-inheritance"><span class="supported-langs__brief">TR</span><span class="supported-langs__title">Türkçe</span></a></li><li class="supported-langs__item"><a class="supported-langs__link" href="https://zh.javascript.info/prototype-inheritance"><span class="supported-langs__brief">ZH</span><span class="supported-langs__title">简体中文</span></a></li></ul></div><div class="supported-langs__text">Мы хотим сделать этот проект с открытым исходным кодом доступным для людей во всем мире. Пожалуйста, <a href="https://github.com/javascript-tutorial/translate" rel="noopener noreferrer" target="_blank">помогите нам перевести</a> это руководство на свой язык</div></div></div></div></div></div><div class="sitetoolbar__logo-wrap"><a class="sitetoolbar__link sitetoolbar__link_logo" href="/"><img class="sitetoolbar__logo sitetoolbar__logo_normal" src="/img/sitetoolbar__logo_ru.svg" width="171" alt="" role="presentation"/><img class="sitetoolbar__logo sitetoolbar__logo_small" src="/img/sitetoolbar__logo_small_ru.svg" width="80" alt="" role="presentation"/><script>Array.prototype.forEach.call(document.querySelectorAll("img.sitetoolbar__logo"),function(e){let t=document.createElement("object");t.type="image/svg+xml",t.className=e.className,t.style.cssText="left:0;top:0;position:absolute",t.onload=function(){t.onload=null,e.style.visibility="hidden"},t.data=e.src,e.parentNode.insertBefore(t,e)});</script></a></div><div class="sitetoolbar__nav-toggle-wrap"><button class="sitetoolbar__nav-toggle" type="button"></button></div><nav class="sitetoolbar__sections"><ul class="sitetoolbar__sections-list"><li class="sitetoolbar__section sitetoolbar__section_current"><a class="sitetoolbar__link" href="/">Учебник</a></li><li class="sitetoolbar__section"><a class="sitetoolbar__link" href="/courses">Курсы</a></li><li class="sitetoolbar__section"><a class="sitetoolbar__link" href="https://javascript.ru/forum/">Форум</a></li><li class="sitetoolbar__section"><a class="sitetoolbar__link" href="https://es5.javascript.ru">ES5</a></li><li class="sitetoolbar__section"><a class="sitetoolbar__link" href="/quiz">Тесты знаний</a></li><li class="sitetoolbar__section sitetoolbar__section_dropdown"><button class="sitetoolbar__dropdown-button" data-dropdown-toggler>Скринкасты</button><div class="sitetoolbar__dropdown-wrap"><div class="sitetoolbar__dropdown-body"><ul class="sitetoolbar__dropdown-items"><li class="sitetoolbar__dropdown-item"><a class="sitetoolbar__secondary-link sitetoolbar__dropdown-link" href="/screencast/nodejs">Node.js</a></li><li class="sitetoolbar__dropdown-item"><a class="sitetoolbar__secondary-link sitetoolbar__dropdown-link" href="/screencast/webpack">Webpack</a></li><li class="sitetoolbar__dropdown-item"><a class="sitetoolbar__secondary-link sitetoolbar__dropdown-link" href="/screencast/gulp">Gulp 4</a></li><li class="sitetoolbar__dropdown-item"><a class="sitetoolbar__secondary-link sitetoolbar__dropdown-link" href="/screencast/react">React.js</a></li><li class="sitetoolbar__dropdown-item"><a class="sitetoolbar__secondary-link sitetoolbar__dropdown-link" href="/screencast/angular">Angular</a></li><li class="sitetoolbar__dropdown-item"><a class="sitetoolbar__secondary-link sitetoolbar__dropdown-link" href="/screencast/git">Git</a></li></ul></div></div></li></ul></nav><div class="sitetoolbar__book-wrap"><a class="buy-book-button" href="/ebook"><span class="buy-book-button__extra-text">Купить</span>EPUB/PDF</a></div><div class="sitetoolbar__login-wrap"><button class="sitetoolbar__login sitetoolbar__login_unready" data-action-login></button></div><div class="sitetoolbar__search-wrap"><div class="sitetoolbar__search-content"><form class="sitetoolbar__search" method="GET" action="/search"><button class="sitetoolbar__search-toggle" type="button"></button><div class="sitetoolbar__search-input"><div class="text-input"><input class="text-input__control" name="query" placeholder="Искать на Javascript.ru" required="required" type="text"/></div><button class="sitetoolbar__find" type="submit">Найти</button></div></form></div></div></div><div class="tablet-menu"><div class="tablet-menu__line"><div class="tablet-menu__content"><select class="tablet-menu__nav input-select input-select input-select_small" onchange="if(this.value) window.location.href=this.value"><option value="/" selected>Учебник</option><option value="/courses">Курсы</option><option value="https://javascript.ru/forum/">Форум</option><option value="https://es5.javascript.ru">ES5</option><option value="/quiz">Тесты знаний</option></select></div></div><div class="tablet-menu__line"><div class="tablet-menu__content"><form class="tablet-menu-search" action="/search/"><input class="tablet-menu-search__input" type="search" name="query" placeholder="Поиск в учебнике" required="required"/><button class="tablet-menu-search__button" type="submit" name="type" value="articles">Поиск</button></form></div></div><div class="tablet-menu__line"><div class="tablet-menu__content"><a class="map" href="/tutorial/map" data-action="tutorial-map"><span class="map__text">Карта учебника</span></a></div></div><div class="tablet-menu__line"><div class="tablet-menu__content"><div class="share-icons"><span class="share-icons__title">Поделиться</span><a class="share share_tw" href="https://twitter.com/share?url=https%3A%2F%2Flearn.javascript.ru%2Fprototype-inheritance" rel="nofollow"></a><a class="share share_fb" href="https://www.facebook.com/sharer/sharer.php?s=100&amp;p%5Burl%5D=https%3A%2F%2Flearn.javascript.ru%2Fprototype-inheritance" rel="nofollow"></a><a class="share share_vk" href="https://vkontakte.ru/share.php?url=https%3A%2F%2Flearn.javascript.ru%2Fprototype-inheritance" rel="nofollow"></a></div></div></div><div class="tablet-menu__line"><div class="tablet-menu__content"><select class="tablet-menu__nav input-select input-select input-select_small" onchange="if(this.value) window.location.href=this.value"><option value="https://javascript.info/prototype-inheritance">English</option><option value="https://ja.javascript.info/prototype-inheritance">日本語</option><option value="https://ko.javascript.info/prototype-inheritance">한국어</option><option value="https://learn.javascript.ru/prototype-inheritance" selected>Русский</option><option value="https://tr.javascript.info/prototype-inheritance">Türkçe</option><option value="https://zh.javascript.info/prototype-inheritance">简体中文</option></select></div></div></div><progress class="tutorial-progress" data-sticky value="59" max="90" data-tooltip="Урок 59 из 90"></progress></div><div class="page page_sidebar_on page_inner_padding"><script>if(localStorage.noSidebar){document.querySelector(".page").classList.remove("page_sidebar_on");var pageWrapper=document.querySelector(".page-wrapper");pageWrapper&&pageWrapper.classList.remove("page-wrapper_sidebar_on")}setTimeout(function(){document.querySelector(".page").classList.add("page_sidebar-animation-on")},0);</script><div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><div class="main__header-group"><ol class="breadcrumbs"><li class="breadcrumbs__item breadcrumbs__item_home"><a class="breadcrumbs__link" href="/"><span class="breadcrumbs__hidden-text">Учебник</span></a></li><li class="breadcrumbs__item" id="breadcrumb-1"><a class="breadcrumbs__link" href="/js"><span>Язык программирования JavaScript</span></a></li><li class="breadcrumbs__item" id="breadcrumb-2"><a class="breadcrumbs__link" href="/prototypes"><span>Прототипы, наследование</span></a></li><script type="application/ld+json">{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"name":"Учебник","item":"https://learn.javascript.ru/"},{"@type":"ListItem","position":2,"name":"Язык программирования JavaScript","item":"https://learn.javascript.ru/js"},{"@type":"ListItem","position":3,"name":"Прототипы, наследование","item":"https://learn.javascript.ru/prototypes"}]}</script></ol><div class="updated-at" data-tooltip="Последнее обновление: 13-го марта 2020"><div class="updated-at__content">13-го марта 2020</div></div></div><h1 class="main__header-title">Прототипное наследование</h1></div></header><div class="content"><article class="formatted" itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Прототипное наследование"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>В программировании мы часто хотим взять что-то и расширить.</p>
<p>Например, у нас есть объект <code>user</code> со своими свойствами и методами, и мы хотим создать объекты <code>admin</code> и <code>guest</code> как его слегка изменённые варианты. Мы хотели бы повторно использовать то, что есть у объекта <code>user</code>, не копировать/переопределять его методы, а просто создать новый объект на его основе.</p>
<p><em>Прототипное наследование</em> — это возможность языка, которая помогает в этом.</p>
<h2><a class="main__anchor" name="prototype" href="#prototype">[[Prototype]]</a></h2><p>В JavaScript объекты имеют специальное скрытое свойство <code>[[Prototype]]</code> (так оно названо в спецификации), которое либо равно <code>null</code>, либо ссылается на другой объект. Этот объект называется «прототип»:</p>
<figure><div class="image" style="width:191px">
      <div class="image__ratio" style="padding-top:78.53403141361257%"></div>
      <object type="image/svg+xml" data="/article/prototype-inheritance/object-prototype-empty.svg" width="191" height="150" class="image__image">
        <img src="/article/prototype-inheritance/object-prototype-empty.svg" alt="" width="191" height="150">
      </object>
      </div></figure><p>Прототип даёт нам немного «магии». Когда мы хотим прочитать свойство из <code>object</code>, а оно отсутствует, JavaScript автоматически берёт его из прототипа. В программировании такой механизм называется «прототипным наследованием». Многие интересные возможности языка и техники программирования основываются на нём.</p>
<p>Свойство <code>[[Prototype]]</code> является внутренним и скрытым, но есть много способов задать его.</p>
<p>Одним из них является использование <code>__proto__</code>, например так:</p>
<div data-trusted="1" class="code-example" data-highlight="[{&quot;start&quot;:7,&quot;end&quot;:7}]">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let animal = {
  eats: true
};
let rabbit = {
  jumps: true
};

rabbit.__proto__ = animal;</code></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type">Свойство <code>__proto__</code> — исторически обусловленный геттер/сеттер для <code>[[Prototype]]</code></span></div>
            <div class="important__content"><p>Обратите внимание, что <code>__proto__</code> — <em>не то же самое</em>, что <code>[[Prototype]]</code>. Это геттер/сеттер для него.</p>
<p>Он существует по историческим причинам, в современном языке его заменяют функции <code>Object.getPrototypeOf/Object.setPrototypeOf</code>, которые также получают/устанавливают прототип. Мы рассмотрим причины этого и сами функции позже.</p>
<p>По спецификации <code>__proto__</code> должен поддерживаться только браузерами, но по факту все среды, включая серверную, поддерживают его. Далее мы будем в примерах использовать <code>__proto__</code>, так как это самый короткий и интуитивно понятный способ установки и чтения прототипа.</p>
</div></div>
<p>Если мы ищем свойство в <code>rabbit</code>, а оно отсутствует, JavaScript автоматически берёт его из <code>animal</code>.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight="[{&quot;start&quot;:10,&quot;end&quot;:10},{&quot;start&quot;:7,&quot;end&quot;:7}]">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let animal = {
  eats: true
};
let rabbit = {
  jumps: true
};

rabbit.__proto__ = animal; // (*)

// теперь мы можем найти оба свойства в rabbit:
alert( rabbit.eats ); // true (**)
alert( rabbit.jumps ); // true</code></pre>
        </div>
      </div>
      
      </div><p>Здесь строка <code>(*)</code> устанавливает <code>animal</code> как прототип для <code>rabbit</code>.</p>
<p>Затем, когда <code>alert</code> пытается прочитать свойство <code>rabbit.eats</code> <code>(**)</code>, его нет в <code>rabbit</code>, поэтому JavaScript следует по ссылке <code>[[Prototype]]</code> и находит его в <code>animal</code> (смотрите снизу вверх):</p>
<figure><div class="image" style="width:191px">
      <div class="image__ratio" style="padding-top:78.53403141361257%"></div>
      <object type="image/svg+xml" data="/article/prototype-inheritance/proto-animal-rabbit.svg" width="191" height="150" class="image__image">
        <img src="/article/prototype-inheritance/proto-animal-rabbit.svg" alt="" width="191" height="150">
      </object>
      </div></figure><p>Здесь мы можем сказать, что &quot;<code>animal</code> является прототипом <code>rabbit</code>&quot; или &quot;<code>rabbit</code> прототипно наследует от <code>animal</code>&quot;.</p>
<p>Так что если у <code>animal</code> много полезных свойств и методов, то они автоматически становятся доступными у <code>rabbit</code>. Такие свойства называются «унаследованными».</p>
<p>Если у нас есть метод в <code>animal</code>, он может быть вызван на <code>rabbit</code>:</p>
<div data-trusted="1" class="code-example" data-highlight="[{&quot;start&quot;:13,&quot;end&quot;:13},{&quot;start&quot;:2,&quot;end&quot;:4}]">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let animal = {
  eats: true,
  walk() {
    alert(&quot;Animal walk&quot;);
  }
};

let rabbit = {
  jumps: true,
  __proto__: animal
};

// walk взят из прототипа
rabbit.walk(); // Animal walk</code></pre>
        </div>
      </div>
      
      </div><p>Метод автоматически берётся из прототипа:</p>
<figure><div class="image" style="width:205px">
      <div class="image__ratio" style="padding-top:84.39024390243902%"></div>
      <object type="image/svg+xml" data="/article/prototype-inheritance/proto-animal-rabbit-walk.svg" width="205" height="173" class="image__image">
        <img src="/article/prototype-inheritance/proto-animal-rabbit-walk.svg" alt="" width="205" height="173">
      </object>
      </div></figure><p>Цепочка прототипов может быть длиннее:</p>
<div data-trusted="1" class="code-example" data-highlight="[{&quot;start&quot;:14,&quot;end&quot;:14},{&quot;start&quot;:9,&quot;end&quot;:9}]">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let animal = {
  eats: true,
  walk() {
    alert(&quot;Animal walk&quot;);
  }
};

let rabbit = {
  jumps: true,
  __proto__: animal
};

let longEar = {
  earLength: 10,
  __proto__: rabbit
};

// walk взят из цепочки прототипов
longEar.walk(); // Animal walk
alert(longEar.jumps); // true (из rabbit)</code></pre>
        </div>
      </div>
      
      </div><figure><div class="image" style="width:206px">
      <div class="image__ratio" style="padding-top:125.24271844660196%"></div>
      <object type="image/svg+xml" data="/article/prototype-inheritance/proto-animal-rabbit-chain.svg" width="206" height="258" class="image__image">
        <img src="/article/prototype-inheritance/proto-animal-rabbit-chain.svg" alt="" width="206" height="258">
      </object>
      </div></figure><p>Есть только два ограничения:</p>
<ol>
<li>Ссылки не могут идти по кругу. JavaScript выдаст ошибку, если мы попытаемся назначить <code>__proto__</code> по кругу.</li>
<li>Значение <code>__proto__</code> может быть объектом или <code>null</code>. Другие типы игнорируются.</li>
</ol>
<p>Это вполне очевидно, но всё же: может быть только один <code>[[Prototype]]</code>. Объект не может наследоваться от двух других объектов.</p>
<h2><a class="main__anchor" name="operatsiya-zapisi-ne-ispolzuet-prototip" href="#operatsiya-zapisi-ne-ispolzuet-prototip">Операция записи не использует прототип</a></h2><p>Прототип используется только для чтения свойств.</p>
<p>Операции записи/удаления работают напрямую с объектом.</p>
<p>В приведённом ниже примере мы присваиваем <code>rabbit</code> собственный метод <code>walk</code>:</p>
<div data-trusted="1" class="code-example" data-highlight="[{&quot;start&quot;:11,&quot;end&quot;:13}]">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let animal = {
  eats: true,
  walk() {
    /* этот метод не будет использоваться в rabbit */
  }
};

let rabbit = {
  __proto__: animal
};

rabbit.walk = function() {
  alert(&quot;Rabbit! Bounce-bounce!&quot;);
};

rabbit.walk(); // Rabbit! Bounce-bounce!</code></pre>
        </div>
      </div>
      
      </div><p>Теперь вызов <code>rabbit.walk()</code> находит метод непосредственно в объекте и выполняет его, не используя прототип:</p>
<figure><div class="image" style="width:202px">
      <div class="image__ratio" style="padding-top:85.64356435643565%"></div>
      <object type="image/svg+xml" data="/article/prototype-inheritance/proto-animal-rabbit-walk-2.svg" width="202" height="173" class="image__image">
        <img src="/article/prototype-inheritance/proto-animal-rabbit-walk-2.svg" alt="" width="202" height="173">
      </object>
      </div></figure><p>Свойства-аксессоры – исключение, так как запись в него обрабатывается функцией-сеттером. То есть, это, фактически, вызов функции.</p>
<p>По этой причине <code>admin.fullName</code> работает корректно в приведённом ниже коде:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let user = {
  name: &quot;John&quot;,
  surname: &quot;Smith&quot;,

  set fullName(value) {
    [this.name, this.surname] = value.split(&quot; &quot;);
  },

  get fullName() {
    return `${this.name} ${this.surname}`;
  }
};

let admin = {
  __proto__: user,
  isAdmin: true
};

alert(admin.fullName); // John Smith (*)

// срабатывает сеттер!
admin.fullName = &quot;Alice Cooper&quot;; // (**)
alert(admin.name); // Alice
alert(admin.surname); // Cooper</code></pre>
        </div>
      </div>
      
      </div><p>Здесь в строке <code>(*)</code> свойство <code>admin.fullName</code> имеет геттер в прототипе <code>user</code>, поэтому вызывается он. В строке <code>(**)</code> свойство также имеет сеттер в прототипе, который и будет вызван.</p>
<h2><a class="main__anchor" name="znachenie-this" href="#znachenie-this">Значение «this»</a></h2><p>В приведённом выше примере может возникнуть интересный вопрос: каково значение <code>this</code> внутри <code>set fullName(value)</code>? Куда записаны свойства <code>this.name</code> и <code>this.surname</code>: в <code>user</code> или в <code>admin</code>?</p>
<p>Ответ прост: прототипы никак не влияют на <code>this</code>.</p>
<p><strong>Неважно, где находится метод: в объекте или его прототипе. При вызове метода <code>this</code> — всегда объект перед точкой.</strong></p>
<p>Таким образом, вызов сеттера <code>admin.fullName=</code> в качестве <code>this</code> использует <code>admin</code>, а не <code>user</code>.</p>
<p>Это на самом деле очень важная деталь, потому что у нас может быть большой объект со множеством методов, от которого можно наследовать. Затем наследующие объекты могут вызывать его методы, но они будут изменять своё состояние, а не состояние объекта-родителя.</p>
<p>Например, здесь <code>animal</code> представляет собой «хранилище методов», и <code>rabbit</code> использует его.</p>
<p>Вызов <code>rabbit.sleep()</code> устанавливает <code>this.isSleeping</code> для объекта <code>rabbit</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>// методы animal
let animal = {
  walk() {
    if (!this.isSleeping) {
      alert(`I walk`);
    }
  },
  sleep() {
    this.isSleeping = true;
  }
};

let rabbit = {
  name: &quot;White Rabbit&quot;,
  __proto__: animal
};

// модифицирует rabbit.isSleeping
rabbit.sleep();

alert(rabbit.isSleeping); // true
alert(animal.isSleeping); // undefined (нет такого свойства в прототипе)</code></pre>
        </div>
      </div>
      
      </div><p>Картинка с результатом:</p>
<figure><div class="image" style="width:206px">
      <div class="image__ratio" style="padding-top:92.23300970873787%"></div>
      <object type="image/svg+xml" data="/article/prototype-inheritance/proto-animal-rabbit-walk-3.svg" width="206" height="190" class="image__image">
        <img src="/article/prototype-inheritance/proto-animal-rabbit-walk-3.svg" alt="" width="206" height="190">
      </object>
      </div></figure><p>Если бы у нас были другие объекты, такие как <code>bird</code>, <code>snake</code> и т.д., унаследованные от <code>animal</code>, они также получили бы доступ к методам <code>animal</code>. Но <code>this</code> при вызове каждого метода будет соответствовать объекту (перед точкой), на котором происходит вызов, а не <code>animal</code>. Поэтому, когда мы записываем данные в <code>this</code>, они сохраняются в этих объектах.</p>
<p>В результате методы являются общими, а состояние объекта — нет.</p>
<h2><a class="main__anchor" name="tsikl-for-in" href="#tsikl-for-in">Цикл for…in</a></h2><p>Цикл <code>for..in</code> проходит не только по собственным, но и по унаследованным свойствам объекта.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight="[{&quot;start&quot;:12,&quot;end&quot;:13},{&quot;start&quot;:9,&quot;end&quot;:10}]">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let animal = {
  eats: true
};

let rabbit = {
  jumps: true,
  __proto__: animal
};

// Object.keys возвращает только собственные ключи
alert(Object.keys(rabbit)); // jumps

// for..in проходит и по своим, и по унаследованным ключам
for(let prop in rabbit) alert(prop); // jumps, затем eats</code></pre>
        </div>
      </div>
      
      </div><p>Если унаследованные свойства нам не нужны, то мы можем отфильтровать их при помощи встроенного метода <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty">obj.hasOwnProperty(key)</a>: он возвращает <code>true</code>, если у <code>obj</code> есть собственное, не унаследованное, свойство с именем <code>key</code>.</p>
<p>Пример такой фильтрации:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let animal = {
  eats: true
};

let rabbit = {
  jumps: true,
  __proto__: animal
};

for(let prop in rabbit) {
  let isOwn = rabbit.hasOwnProperty(prop);

  if (isOwn) {
    alert(`Our: ${prop}`); // Our: jumps
  } else {
    alert(`Inherited: ${prop}`); // Inherited: eats
  }
}</code></pre>
        </div>
      </div>
      
      </div><p>В этом примере цепочка наследования выглядит так: <code>rabbit</code> наследует от <code>animal</code>, который наследует от <code>Object.prototype</code> (так как <code>animal</code> – литеральный объект <code>{...}</code>, то это по умолчанию), а затем <code>null</code> на самом верху:</p>
<figure><div class="image" style="width:233px">
      <div class="image__ratio" style="padding-top:147.6394849785408%"></div>
      <object type="image/svg+xml" data="/article/prototype-inheritance/rabbit-animal-object.svg" width="233" height="344" class="image__image">
        <img src="/article/prototype-inheritance/rabbit-animal-object.svg" alt="" width="233" height="344">
      </object>
      </div></figure><p>Заметим ещё одну деталь. Откуда взялся метод <code>rabbit.hasOwnProperty</code>? Мы его явно не определяли. Если посмотреть на цепочку прототипов, то видно, что он берётся из <code>Object.prototype.hasOwnProperty</code>. То есть, он унаследован.</p>
<p>…Но почему <code>hasOwnProperty</code> не появляется в цикле <code>for..in</code> в отличие от <code>eats</code> и <code>jumps</code>? Он ведь перечисляет все унаследованные свойства.</p>
<p>Ответ простой: оно не перечислимо. То есть, у него внутренний флаг <code>enumerable</code> стоит <code>false</code>, как и у других свойств <code>Object.prototype</code>. Поэтому оно и не появляется в цикле.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Почти все остальные методы получения ключей/значений игнорируют унаследованные свойства</span></div>
            <div class="important__content"><p>Почти все остальные методы, получающие ключи/значения, такие как <code>Object.keys</code>, <code>Object.values</code> и другие – игнорируют унаследованные свойства.</p>
<p>Они учитывают только свойства самого объекта, не его прототипа.</p>
</div></div>
<h2><a class="main__anchor" name="itogo" href="#itogo">Итого</a></h2><ul>
<li>В JavaScript все объекты имеют скрытое свойство <code>[[Prototype]]</code>, которое является либо другим объектом, либо <code>null</code>.</li>
<li>Мы можем использовать <code>obj.__proto__</code> для доступа к нему (исторически обусловленный геттер/сеттер, есть другие способы, которые скоро будут рассмотрены).</li>
<li>Объект, на который ссылается <code>[[Prototype]]</code>, называется «прототипом».</li>
<li>Если мы хотим прочитать свойство <code>obj</code> или вызвать метод, которого не существует у <code>obj</code>, тогда JavaScript попытается найти его в прототипе.</li>
<li>Операции записи/удаления работают непосредственно с объектом, они не используют прототип (если это обычное свойство, а не сеттер).</li>
<li>Если мы вызываем <code>obj.method()</code>, а метод при этом взят из прототипа, то <code>this</code> всё равно ссылается на <code>obj</code>. Таким образом, методы всегда работают с текущим объектом, даже если они наследуются.</li>
<li>Цикл <code>for..in</code> перебирает как свои, так и унаследованные свойства. Остальные методы получения ключей/значений работают только с собственными свойствами объекта.</li>
</ul>
</div></article><div class="tasks formatted"><h2 class="tasks__title" id="tasks"><a class="tasks__title-anchor main__anchor main__anchor main__anchor_noicon" href="#tasks">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a class="main__anchor" href="#rabota-s-prototipami" name="rabota-s-prototipami">Работа с прототипами</a></h3><a class="task__open-link" href="/task/property-after-delete" target="_blank"></a></div><div class="task__header-note"><span class="task__importance" title="Насколько эта задача важна для освоения материала, от 1 до 5">важность: 5</span></div><div class="task__content"><p>В приведённом ниже коде создаются и изменяются два объекта.</p>
<p>Какие значения показываются в процессе выполнения кода?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let animal = {
  jumps: null
};
let rabbit = {
  __proto__: animal,
  jumps: true
};

alert( rabbit.jumps ); // ? (1)

delete rabbit.jumps;

alert( rabbit.jumps ); // ? (2)

delete animal.jumps;

alert( rabbit.jumps ); // ? (3)</code></pre>
        </div>
      </div>
      
      </div><p>Должно быть 3 ответа.</p>
<button class="task__solution" type="button">решение</button><div class="task__answer"><div class="task__answer-content"><ol>
<li><code>true</code>, берётся из <code>rabbit</code>.</li>
<li><code>null</code>, берётся из <code>animal</code>.</li>
<li><code>undefined</code>, такого свойства больше нет.</li>
</ol>
</div><button class="close-button task__answer-close" type="button" title="закрыть"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a class="main__anchor" href="#algoritm-poiska" name="algoritm-poiska">Алгоритм поиска</a></h3><a class="task__open-link" href="/task/search-algorithm" target="_blank"></a></div><div class="task__header-note"><span class="task__importance" title="Насколько эта задача важна для освоения материала, от 1 до 5">важность: 5</span></div><div class="task__content"><p>Задача состоит из двух частей.</p>
<p>У нас есть объекты:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let head = {
  glasses: 1
};

let table = {
  pen: 3
};

let bed = {
  sheet: 1,
  pillow: 2
};

let pockets = {
  money: 2000
};</code></pre>
        </div>
      </div>
      
      </div><ol>
<li>С помощью свойства <code>__proto__</code> задайте прототипы так, чтобы поиск любого свойства выполнялся по следующему пути: <code>pockets</code> → <code>bed</code> → <code>table</code> → <code>head</code>. Например, <code>pockets.pen</code> должно возвращать значение <code>3</code> (найденное в <code>table</code>), а <code>bed.glasses</code> – значение <code>1</code> (найденное в <code>head</code>).</li>
<li>Ответьте на вопрос: как быстрее получить значение <code>glasses</code> – через <code>pockets.glasses</code> или через <code>head.glasses</code>? При необходимости составьте цепочки поиска и сравните их.</li>
</ol>
<button class="task__solution" type="button">решение</button><div class="task__answer"><div class="task__answer-content"><ol>
<li>
<p>Добавим свойство <code>__proto__</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let head = {
  glasses: 1
};

let table = {
  pen: 3,
  __proto__: head
};

let bed = {
  sheet: 1,
  pillow: 2,
  __proto__: table
};

let pockets = {
  money: 2000,
  __proto__: bed
};

alert( pockets.pen ); // 3
alert( bed.glasses ); // 1
alert( table.money ); // undefined</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>С точки зрения производительности, для современных движков неважно, откуда берётся свойство – из объекта или из прототипа. Они запоминают, где было найдено свойство, и повторно используют его в следующем запросе.</p>
<p>Например, при обращении к <code>pockets.glasses</code> они запомнят, что нашли <code>glasses</code> в <code>head</code>, и в следующий раз будут искать там же. Они достаточно умны, чтобы при изменениях обновлять внутренний кеш, поэтому такая оптимизация безопасна.</p>
</li>
</ol>
</div><button class="close-button task__answer-close" type="button" title="закрыть"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a class="main__anchor" href="#kuda-budet-proizvedena-zapis" name="kuda-budet-proizvedena-zapis">Куда будет произведена запись?</a></h3><a class="task__open-link" href="/task/proto-and-this" target="_blank"></a></div><div class="task__header-note"><span class="task__importance" title="Насколько эта задача важна для освоения материала, от 1 до 5">важность: 5</span></div><div class="task__content"><p>Объект <code>rabbit</code> наследует от объекта <code>animal</code>.</p>
<p>Какой объект получит свойство <code>full</code> при вызове <code>rabbit.eat()</code>: <code>animal</code> или <code>rabbit</code>?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let animal = {
  eat() {
    this.full = true;
  }
};

let rabbit = {
  __proto__: animal
};

rabbit.eat();</code></pre>
        </div>
      </div>
      
      </div><button class="task__solution" type="button">решение</button><div class="task__answer"><div class="task__answer-content"><p><strong>Ответ: <code>rabbit</code>.</strong></p>
<p>Поскольку <code>this</code> – это объект, который стоит перед точкой, <code>rabbit.eat()</code> изменяет объект <code>rabbit</code>.</p>
<p>Поиск свойства и исполнение кода – два разных процесса.
Сначала осуществляется поиск метода <code>rabbit.eat</code> в прототипе, а затем этот метод выполняется с <code>this=rabbit</code>.</p>
</div><button class="close-button task__answer-close" type="button" title="закрыть"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a class="main__anchor" href="#pochemu-naedayutsya-oba-homyaka" name="pochemu-naedayutsya-oba-homyaka">Почему наедаются оба хомяка?</a></h3><a class="task__open-link" href="/task/hamster-proto" target="_blank"></a></div><div class="task__header-note"><span class="task__importance" title="Насколько эта задача важна для освоения материала, от 1 до 5">важность: 5</span></div><div class="task__content"><p>У нас есть два хомяка: шустрый (<code>speedy</code>) и ленивый (<code>lazy</code>); оба наследуют от общего объекта <code>hamster</code>.</p>
<p>Когда мы кормим одного хомяка, второй тоже наедается. Почему? Как это исправить?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let hamster = {
  stomach: [],

  eat(food) {
    this.stomach.push(food);
  }
};

let speedy = {
  __proto__: hamster
};

let lazy = {
  __proto__: hamster
};

// Этот хомяк нашёл еду
speedy.eat(&quot;apple&quot;);
alert( speedy.stomach ); // apple

// У этого хомяка тоже есть еда. Почему? Исправьте
alert( lazy.stomach ); // apple</code></pre>
        </div>
      </div>
      
      </div><button class="task__solution" type="button">решение</button><div class="task__answer"><div class="task__answer-content"><p>Давайте внимательно посмотрим, что происходит при вызове <code>speedy.eat(&quot;apple&quot;)</code>.</p>
<ol>
<li>
<p>Сначала в прототипе (<code>=hamster</code>) находится метод <code>speedy.eat</code>, а затем он выполняется с <code>this=speedy</code> (объект перед точкой).</p>
</li>
<li>
<p>Затем в <code>this.stomach.push()</code> нужно найти свойство <code>stomach</code> и вызвать для него <code>push</code>. Движок ищет <code>stomach</code> в <code>this</code> (<code>=speedy</code>), но ничего не находит.</p>
</li>
<li>
<p>Он идёт по цепочке прототипов и находит <code>stomach</code> в <code>hamster</code>.</p>
</li>
<li>
<p>И вызывает для него <code>push</code>, добавляя еду в <em>живот прототипа</em>.</p>
</li>
</ol>
<p>Получается, что у хомяков один живот на двоих!</p>
<p>И при <code>lazy.stomach.push(...)</code> и при <code>speedy.stomach.push()</code>, свойство <code>stomach</code> берётся из прототипа (так как его нет в самом объекте), затем в него добавляются данные.</p>
<p>Обратите внимание, что этого не происходит при простом присваивании <code>this.stomach=</code>:</p>
<div data-trusted="1" class="code-example" data-highlight="[{&quot;start&quot;:4,&quot;end&quot;:5}]">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let hamster = {
  stomach: [],

  eat(food) {
    // присвоение значения this.stomach вместо вызова this.stomach.push
    this.stomach = [food];
  }
};

let speedy = {
   __proto__: hamster
};

let lazy = {
  __proto__: hamster
};

// Шустрый хомяк нашёл еду
speedy.eat(&quot;apple&quot;);
alert( speedy.stomach ); // apple

// Живот ленивого хомяка пуст
alert( lazy.stomach ); // &lt;ничего&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Теперь всё работает правильно, потому что <code>this.stomach=</code> не ищет свойство <code>stomach</code>. Значение записывается непосредственно в объект <code>this</code>.</p>
<p>Также мы можем полностью избежать проблемы, если у каждого хомяка будет собственный живот:</p>
<div data-trusted="1" class="code-example" data-highlight="[{&quot;start&quot;:15,&quot;end&quot;:15},{&quot;start&quot;:10,&quot;end&quot;:10}]">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code>let hamster = {
  stomach: [],

  eat(food) {
    this.stomach.push(food);
  }
};

let speedy = {
  __proto__: hamster,
  stomach: []
};

let lazy = {
  __proto__: hamster,
  stomach: []
};

// Шустрый хомяк нашёл еду
speedy.eat(&quot;apple&quot;);
alert( speedy.stomach ); // apple

// Живот ленивого хомяка пуст
alert( lazy.stomach ); // &lt;ничего&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Все свойства, описывающие состояние объекта (как свойство <code>stomach</code> в примере выше), рекомендуется записывать в сам этот объект. Это позволяет избежать подобных проблем.</p>
</div><button class="close-button task__answer-close" type="button" title="закрыть"></button></div></div></div></div></div></div><div class="page__nav-wrap"><a class="page__nav page__nav_prev" href="/prototypes" data-tooltip="Прототипы, наследование"><span class="page__nav-text"><span class="page__nav-text-shortcut"></span></span><span class="page__nav-text-alternate">Предыдущий урок</span></a><a class="page__nav page__nav_next" href="/function-prototype" data-tooltip="F.prototype"><span class="page__nav-text"><span class="page__nav-text-shortcut"></span></span><span class="page__nav-text-alternate">Следующий урок</span></a></div><div class="article-tablet-foot tablet-only"><div class="article-tablet-foot__layout"><div class="share-icons"><span class="share-icons__title">Поделиться</span><a class="share share_tw" href="https://twitter.com/share?url=https%3A%2F%2Flearn.javascript.ru%2Fprototype-inheritance" rel="nofollow"></a><a class="share share_fb" href="https://www.facebook.com/sharer/sharer.php?s=100&amp;p%5Burl%5D=https%3A%2F%2Flearn.javascript.ru%2Fprototype-inheritance" rel="nofollow"></a><a class="share share_vk" href="https://vkontakte.ru/share.php?url=https%3A%2F%2Flearn.javascript.ru%2Fprototype-inheritance" rel="nofollow"></a></div><div class="article-tablet-foot__map"><a class="map" href="/tutorial/map" data-action="tutorial-map"><span class="map__text">Карта учебника</span></a></div></div></div><div class="banner-bottom"><div class="banner-bottom__text">Проводим <a href="/courses">курсы по JavaScript и фреймворкам</a>.</div><button class="banner-bottom__close" data-banner-close="Courses" data-banner-close-message="Эта информация больше не будет выводиться." title="не показывать"></button></div><script>!!1&&"hideBannerCourses"in localStorage||(document.querySelector(".banner-bottom").style.display="flex");</script><div class="comments formatted" id="comments"><div class="comments__header"><h2 class="comments__header-title"><a href="#comments" name="comments">Комментарии</a></h2><div class="comments__read-before"><span class="comments__read-before-link">перед тем как писать…</span><div class="comments__read-before-popup"><div class="comments__read-before-popup-i"><ul><li>Если вам кажется, что в статье что-то не так - вместо комментария напишите <a href="https://github.com/javascript-tutorial/ru.javascript.info/issues/new">на GitHub</a>.</li><li>Для одной строки кода используйте тег <code>&lt;code&gt;</code>, для нескольких строк кода&nbsp;&mdash; тег <code>&lt;pre&gt;</code>, если больше 10 строк&nbsp;&mdash; ссылку на песочницу (<a href='https://plnkr.co/edit/?p=preview'>plnkr</a>, <a href='http://jsbin.com'>JSBin</a>, <a href='http://codepen.io'>codepen</a>…)</li><li>Если что-то непонятно в статье&nbsp;&mdash; пишите, что именно и с какого места.</li></ul></div></div></div></div><div id="disqus_thread"></div><script>var disqus_config = function() { if (!this.page) this.page = {}; Object.assign(this.page, {"url":"https:\/\/learn.javascript.ru\/prototype-inheritance","identifier":"\/prototype-inheritance"}); };</script><script>var disqus_shortname = "learnjavascriptru";</script><script>var disqus_enabled = true;</script></div></main></div><div class="sidebar page__sidebar sidebar sidebar_sticky-footer"><button class="sidebar__toggle" data-sidebar-toggle></button><a class="map" href="/tutorial/map" data-action="tutorial-map" data-tooltip="Карта учебника"></a><div class="sidebar__inner"><div class="sidebar__content"><div class="sidebar__section"><h4 class="sidebar__section-title">Раздел</h4><nav class="sidebar__navigation"><ul class="sidebar__navigation-links"><li class="sidebar__navigation-link"><a class="sidebar__link" href="/prototypes">Прототипы, наследование</a></li></ul></nav></div><div class="sidebar__section"><h4 class="sidebar__section-title">Навигация по уроку</h4><nav class="sidebar__navigation"><ul class="sidebar__navigation-links"><li class="sidebar__navigation-link"><a class="sidebar__link" href="#prototype">[[Prototype]]</a></li><li class="sidebar__navigation-link"><a class="sidebar__link" href="#operatsiya-zapisi-ne-ispolzuet-prototip">Операция записи не использует прототип</a></li><li class="sidebar__navigation-link"><a class="sidebar__link" href="#znachenie-this">Значение «this»</a></li><li class="sidebar__navigation-link"><a class="sidebar__link" href="#tsikl-for-in">Цикл for…in</a></li><li class="sidebar__navigation-link"><a class="sidebar__link" href="#itogo">Итого</a></li></ul></nav></div><div class="sidebar__section"><nav class="sidebar__navigation"><ul class="sidebar__navigation-links"><li class="sidebar__navigation-link"><a class="sidebar__link" href="#tasks">Задачи (4)</a></li><li class="sidebar__navigation-link"><a class="sidebar__link" href="#comments">Комментарии</a></li></ul></nav></div><div class="sidebar__section"><div class="sidebar__section-title">Поделиться</div><a class="share share_tw sidebar__share" href="https://twitter.com/share?url=https%3A%2F%2Flearn.javascript.ru%2Fprototype-inheritance" rel="nofollow"></a><a class="share share_fb sidebar__share" href="https://www.facebook.com/sharer/sharer.php?s=100&amp;p[url]=https%3A%2F%2Flearn.javascript.ru%2Fprototype-inheritance" rel="nofollow"></a><a class="share share_vk sidebar__share" href="https://vkontakte.ru/share.php?url=https%3A%2F%2Flearn.javascript.ru%2Fprototype-inheritance" rel="nofollow"></a></div><div class="sidebar__section"><a class="sidebar__link" href="https://github.com/javascript-tutorial/ru.javascript.info/blob/master/1-js/08-prototypes/01-prototype-inheritance" rel="nofollow">Редактировать на GitHub</a></div></div></div></div></div></div><div class="page-footer"><ul class="page-footer__list"><li class="page-footer__item page-footer__item_copy">©&nbsp;2007—2020&nbsp; Илья Кантор</li><li class="page-footer__item page-footer__item_about"><a class="page-footer__link" href="/about">о проекте</a></li><li class="page-footer__item page-footer__item_contact"><a class="page-footer__link" href="/about#contact-us">связаться с нами</a></li><li class="page-footer__item page-footer__item_terms"><a class="page-footer__link" href="/terms">пользовательское соглашение</a></li><li class="page-footer__item page-footer__item_privacy"><a class="page-footer__link" href="/privacy">политика конфиденциальности</a></li><li class="page-footer__item page-footer__item_slack"><a class="page-footer__slack" href="http://slack.javascript.ru">slack-чат</a></li></ul></div></body></html><!DOCTYPE html>
<html>
    <head>
        
            <!-- Global site tag (gtag.js) - Google Analytics -->
            <script async src="https://www.googletagmanager.com/gtag/js?id=UA-65234733-3"></script>
            <script>
              window.dataLayer = window.dataLayer || [];
              function gtag(){dataLayer.push(arguments);}
              gtag('js', new Date());

              gtag('config', 'UA-65234733-3');

              
            </script>

            <!-- google AdSense -->
            <script data-ad-client="ca-pub-5884869694377550" async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
        
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <meta name="verification" content="a89500ae673594aa249fe46e413bbe" />

        <meta name="author" content="LegGnom">

        <title>Golang: Выполнение HTTP запросов</title>

        
            <meta name="description" content="Блог о программировании. Python, Flask, PostgreSQL, MongoDB, PHP, JavaScript, Angular, React, Vue. Статьи, примеры программ.">
            <meta property="og:description" content="Блог о программировании. Python, Flask, PostgreSQL, MongoDB, PHP, JavaScript, Angular, React, Vue. Статьи, примеры программ." />
        

        

        <meta name="yandex-verification" content="d872c867276d8c12" />
        <meta name="google-site-verification" content="FISFWHe1hZDLPNC-MRkY4nV0jrEoEyTfMBKviUiNy2g" />
        <meta name="msvalidate.01" content="0767E24C5FE439A333A90758D929CB32" />

        <meta property="og:title" content="Golang: Выполнение HTTP запросов" />


        

        <link rel="stylesheet" href="/static/highlight/styles/atom-one-dark.css?q=1595359497.985594">

        <link href="/feed/rss/" rel="alternate" title="Recent Changes" type="application/atom+xml">

        <link href="https://fonts.googleapis.com/css?family=Lobster|Open+Sans:300,400,700&amp;subset=cyrillic" rel="stylesheet">
        <link rel="stylesheet" href="/static/bundle/style.css?q=1595359497.985594">

        <link rel="shortcut icon" href="/static/favicon.ico?q=1595359497.985594" type="image/x-icon">
        <link rel="icon" href="/static/favicon.ico?q=1595359497.985594" type="image/x-icon">

        
    <link rel="canonical" href="https://dev-gang.ru/article/golang-making-http-requests/" />

    </head>
    <body class="">
        
            

            <div class="base">
                
                    

<div class="header">
    <div class="wrap">
        <a href="/" class="header__name">
            DevGang
        </a>

        <div class="header__category-menu">
            <ul class="header__category-menu_box hidden">
                
                    

                    

                    <li onclick="window.location='/'" data-key="">
                        Все
                    </li>
                
                    

                    
                        
                    

                    <li onclick="window.location='/?category=news'" data-key="news">
                        Новости
                    </li>
                
                    

                    
                        
                    

                    <li onclick="window.location='/?category=back'" data-key="back">
                        BackEnd
                    </li>
                
                    

                    
                        
                    

                    <li onclick="window.location='/?category=front'" data-key="front">
                        FrontEnd
                    </li>
                
                    

                    
                        
                    

                    <li onclick="window.location='/?category=mobile'" data-key="mobile">
                        Mobile
                    </li>
                
                    

                    
                        
                    

                    <li onclick="window.location='/?category=ops'" data-key="ops">
                        DevOps
                    </li>
                
                    

                    
                        
                    

                    <li onclick="window.location='/?category=design'" data-key="design">
                        Дизайн
                    </li>
                
                    

                    
                        
                    

                    <li onclick="window.location='/?category=other'" data-key="other">
                        Остальное
                    </li>
                
            </ul>
            <span class="header__category-menu_current button _small _empty"></span>
        </div>

        <div class="header__auth-box">
            
                <span class="button _link _small js-header__auth">Авторизоваться</span>
                
    

    <div class="modal"
         data-modal-name="auth"
         data-target=".js-header__auth"
         data-init="0">

        <div class="modal__space"></div>
        <div class="modal__content _small">
            
                    <h3>Войти на сайт</h3>

<div class="modal-auth">
    <div class="grid modal-auth__top-line">
        <div class="span-6"><a class="modal-auth__link _vk" href="http://oauth.vk.com/authorize?client_id=6830221&amp;redirect_uri=https://dev-gang.ru/oauth/vk/&amp;response_type=code&amp;scope=email">Вконтакте</a></div>
        <div class="span-6"><a class="modal-auth__link _fb" href="https://www.facebook.com/dialog/oauth?client_id=973809579479822&amp;redirect_uri=https://dev-gang.ru/oauth/fb/&amp;response_type=code&amp;scope=email">Facebook</a></div>
    </div>

    <div class="grid">
        <div class="span-6"><a class="modal-auth__link _gh" href="https://github.com/login/oauth/authorize?client_id=46f1b46c0a471b28ea2c&amp;redirect_uri=https://dev-gang.ru/oauth/github/&amp;scope=user&amp;state=">GitHub</a></div>
        <div class="span-6"><a class="modal-auth__link _gp" href="https://accounts.google.com/o/oauth2/auth?client_id=377190392148-dt5g4gfrqkdgeo2gs4jf5q2rvagjffk3.apps.googleusercontent.com&amp;redirect_uri=https://dev-gang.ru/oauth/gp/&amp;response_type=code&amp;scope=https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile">Google</a></div>
    </div>
</div>
                
        </div>
    </div>

            

        </div>
    </div>
</div>

                    <div class="base__content">
                        <div class="wrap">
                            

    
        <script>
            setTimeout(function () {
                var xhr = new XMLHttpRequest();
                xhr.open( 'POST', '/check-session/', true );
                xhr.send();
            }, 300);
        </script>
    


    <div class="article">
        <div class="grid">
            <div class="span-8">
                <article>

                    <div class="box article__body _block">
                        

                        <div>
                            <div class="article__date">05.07.2018 в 03:46</div>
                            <a href="/user/None/" class="article__author">
                                
                            </a>
                        </div>


                        

                        <h1 class="article__name">Golang: Выполнение HTTP запросов</h1>

                        <div class="article__content">
                            

                            
                                <p>В этом посте мы рассмотрим, как можно делать HTTP-запросы, используя Go. Мы будем использовать пакет net/http, который предоставляет все необходимое для создания HTTP-запросов или создания новых http-серверов. То есть, этот пакет поможет нам сделать все что связано с «http».</p>
                            

                            <div class="js-article-content">
                                
                                    <p>Чтобы проверить, что мы сделали правильные запросы, мы будем использовать <a href="https://httpbin.org/">httpbin</a>, который является хорошим сервисом для тестирования наших запросов на локальных компьютерах.</p>

<h3>Простой HTTP-запрос</h3>

<p>Давайте сделаем очень простой GET запрос и посмотрим, как мы можем прочитать ответ. Мы отправим простой HTTP-запрос GET на <a href="https://httpbin.org/get">https://httpbin.org/get</a> и прочитаем ответ. Для этого мы можем просто импортировать пакет net/http и использовать вызов функции http.Get:</p>

<pre class="prettyprint">
package main

import (
	&quot;net/http&quot;
	&quot;log&quot;
	&quot;io/ioutil&quot;
)

func main() {
	MakeRequest()
}

func MakeRequest() {
	resp, err := http.Get(&quot;https://httpbin.org/get&quot;)
	if err != nil {
		log.Fatalln(err)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	log.Println(string(body))
}</pre>

<p>Мы создали отдельную функцию MakeRequest и вызвали ее из нашей основной функции. Внутри этой функции мы передали URL-адрес http.Get и получили два значения - объект ответа и переменную с ошибками, которые могли произойти во время вызова. Мы проверили, есть ли какие-либо ошибки. Если ошибок не было, ошибка будет равна <strong>nil</strong>. Обратите внимание, что эта ошибка будет сообщаться только в том случае, если возникла проблема с подключением к серверу и получением ответа. Однако, если сервер отправляет http ответ 500 (что является внутренней ошибкой сервера), вы получите этот код состояния и сообщение об ошибке на соответствующем объекте, а не в переменной <strong>err</strong>.</p>

<p>Затем мы читаем <strong>resp.Body</strong>, который реализует интерфейс <strong>io.ReadCloser</strong>, и мы можем использовать <strong>ioutil.ReadAll</strong>, чтобы полностью прочитать ответ. Эта функция также возвращает два значения - байтовый срез (<strong>[]byte</strong>) и <strong>err</strong>. Опять же, мы проверяем любые возможные ошибки при чтении тела ответа. Если ошибок не было, мы печатаем тело. Обратите внимание на <strong>string(body)</strong>. Здесь мы преобразуем байтовый срез в строку. Если мы этого не сделаем, log.Println будет распечатывать представление байтового фрагмента, списка всех байтов в этом фрагменте, индивидуально. Но нам нужно строковое представление. Поэтому мы идем вперед и делаем преобразование.</p>

<p>Мы увидим, что напечатанный вывод представляет собой JSON объект в виде строки. Итак, в следующем примере мы увидим, как мы можем отправлять и читать сообщения в формате JSON.</p>

<h3>Отправка и получение запросов в JSON</h3>

<p>Теперь давайте отправим сообщение в формате JSON. Как мы это сделаем? Если вы пришли из Python/Node/Ruby, вы возможно уже использовали для формирования JSON объектов (словари), далее предавали их в свою любимую библиотеку и устанавливали нужный формат передачи данных. Ваша библиотека выполняла для вас преобразование объекта в JSON и отправляла запрос с требуемыми заголовками. В Go, однако, все более явно и меньше магии, что на самом деле хорошо. Вы будете знать, что делаете и как вы это делаете.</p>

<p>В Go мы сначала преобразуем нашу структуру данных в байтовый срез, содержащий JSON-представление данных. Затем мы передаем его запросу с соответствующим типом контента. Давайте посмотрим на пример кода:</p>

<pre class="prettyprint">
func MakeRequest() {

	message := map[string]interface{}{
		&quot;hello&quot;: &quot;world&quot;,
		&quot;life&quot;:  42,
		&quot;embedded&quot;: map[string]string{
			&quot;yes&quot;: &quot;of course!&quot;,
		},
	}

	bytesRepresentation, err := json.Marshal(message)
	if err != nil {
		log.Fatalln(err)
	}

	resp, err := http.Post(&quot;https://httpbin.org/post&quot;, &quot;application/json&quot;, bytes.NewBuffer(bytesRepresentation))
	if err != nil {
		log.Fatalln(err)
	}

	var result map[string]interface{}

	json.NewDecoder(resp.Body).Decode(&amp;result)

	log.Println(result)
	log.Println(result[&quot;data&quot;])
}</pre>

<p>Сначала мы создали <strong>message</strong>, переменная, которая представляет собой карту, содержащую string, int и другую встроенную карту. Затем мы вызвали функцию <strong>json.Marshal</strong> чтобы получить массив []byte из нашей структуры. Далее мы также делаем проверку на ошибки, которые могли возникнуть во время преобразования структуры. Затем мы делаем запрос POST, используя функцию <strong>http.Post</strong>. Мы передаем url, наш тип контента (<strong>application/json</strong>), а затем мы создаем и передаем новый объект <strong>bytes.Buffer</strong> из нашей переменной <strong>bytesRepresentation</strong>. Зачем нам здесь создавать буфер? Функция <strong>http.Post</strong> ожидает реализации io.Reader. Поэтому мы могли бы даже прочитать эту часть с диска или сети. В нашем случае мы можем просто создать буфер байтов, который реализует интерфейс io.Reader. Мы отправляем запрос и проверяем наличие ошибок.</p>

<p>Затем мы объявляем другую переменную <strong>result</strong> (которая также является типом <strong>map</strong>) для хранения результатов, возвращаемых из запроса. Сначала мы могли прочитать полное тело (как и в предыдущем примере), а затем сделать <strong>json.Unmarshal</strong> на нем. Однако, поскольку <strong>resp.Body</strong> возвращает объект <strong>io.Reader</strong>, мы можем просто передать его <strong>json.NewDecoder</strong>, а затем вызвать функцию <strong>Decode</strong> на нем. Помните, мы должны передать указатель на наш объект map, поэтому мы передали переменную как <strong>&amp;result</strong> вместо <strong>result</strong>. Функция Decode также возвращает вторым параметром ошибку. Но мы предполагали, что это не имеет значения и не проверяем ее. Мы зарегистрировали result и result[&quot;data&quot;]. Служба <strong>httpbin</strong> отправляет различную информацию о запросе в качестве ответа.</p>

<ul>
	<li>
	<p>Golang: Выполнение HTTP запросов</p>
	</li>
	<li>
	<p><a href="/article/golang-making-http-requests-2/">Golang: Работы с HTTP запросами часть 2</a></p>
	</li>
	<li>
	<p><a href="/article/golang-making-http-requests-3/">Golang: Работы с HTTP запросами часть 3</a></p>
	</li>
</ul>

                                
                            </div>
                            
    <div class="float-menu hidden" data-selector=".js-article-content">
        <div class="float-menu__content"></div>
        <div class="float-menu__button">
            <img src="/static/icons/menu.svg"/>
            <span>Меню</span>
        </div>
    </div>


                            

                            
                                <a href="/?tag=12">#Golang</a>
                            
                        </div>

                        <div class="box__footer article__meta-box">
                            <div class="article__share">
                                
    <div class="share">
        Поделится публикацией
        <div class="ya-share2 share__box" data-services="vkontakte,facebook,gplus,twitter,telegram" data-counter=""></div>
    </div>

                            </div>
                            


<div class="article-meta">
    <div class="article-meta__item _visits">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 488.85 488.85">
	<path d="M244.425,98.725c-93.4,0-178.1,51.1-240.6,134.1c-5.1,6.8-5.1,16.3,0,23.1c62.5,83.1,147.2,134.2,240.6,134.2
		s178.1-51.1,240.6-134.1c5.1-6.8,5.1-16.3,0-23.1C422.525,149.825,337.825,98.725,244.425,98.725z M251.125,347.025
		c-62,3.9-113.2-47.2-109.3-109.3c3.2-51.2,44.7-92.7,95.9-95.9c62-3.9,113.2,47.2,109.3,109.3
		C343.725,302.225,302.225,343.725,251.125,347.025z M248.025,299.625c-33.4,2.1-61-25.4-58.8-58.8c1.7-27.6,24.1-49.9,51.7-51.7
		c33.4-2.1,61,25.4,58.8,58.8C297.925,275.625,275.525,297.925,248.025,299.625z"/>
</svg>
        8618
    </div>

    <div class="article-meta__item _visits">
        <svg viewBox="-21 -47 682.66669 682" xmlns="http://www.w3.org/2000/svg">
    <path d="m552.011719-1.332031h-464.023438c-48.515625 0-87.988281 39.464843-87.988281 87.988281v283.972656c0 48.414063 39.300781 87.816406 87.675781 87.988282v128.863281l185.191407-128.863281h279.144531c48.515625 0 87.988281-39.472657 87.988281-87.988282v-283.972656c0-48.523438-39.472656-87.988281-87.988281-87.988281zm50.488281 371.960937c0 27.835938-22.648438 50.488282-50.488281 50.488282h-290.910157l-135.925781 94.585937v-94.585937h-37.1875c-27.839843 0-50.488281-22.652344-50.488281-50.488282v-283.972656c0-27.84375 22.648438-50.488281 50.488281-50.488281h464.023438c27.839843 0 50.488281 22.644531 50.488281 50.488281zm0 0"/>
    <path d="m171.292969 131.171875h297.414062v37.5h-297.414062zm0 0"/>
    <path d="m171.292969 211.171875h297.414062v37.5h-297.414062zm0 0"/>
    <path d="m171.292969 291.171875h297.414062v37.5h-297.414062zm0 0"/>
</svg>
        0
    </div>

    <div class="article-meta__item">
        

    
    

    <div class="vote ">

        <span class="vote__arrow _down js-header__auth" data-id="20">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 284.929 284.929" width="18px">
  <path d="M282.082 76.511l-14.274-14.273c-1.902-1.906-4.093-2.856-6.57-2.856-2.471 0-4.661.95-6.563 2.856L142.466 174.441 30.262 62.241c-1.903-1.906-4.093-2.856-6.567-2.856-2.475 0-4.665.95-6.567 2.856L2.856 76.515C.95 78.417 0 80.607 0 83.082c0 2.473.953 4.663 2.856 6.565l133.043 133.046c1.902 1.903 4.093 2.854 6.567 2.854s4.661-.951 6.562-2.854L282.082 89.647c1.902-1.903 2.847-4.093 2.847-6.565 0-2.475-.945-4.665-2.847-6.571z"/>
</svg>
        </span>

        <span class="js-vote-counter">0</span>

        <span class="vote__arrow _up js-header__auth" data-id="20">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 284.929 284.929" width="18px">
  <path d="M282.082 195.285L149.028 62.24c-1.901-1.903-4.088-2.856-6.562-2.856s-4.665.953-6.567 2.856L2.856 195.285C.95 197.191 0 199.378 0 201.853c0 2.474.953 4.664 2.856 6.566l14.272 14.271c1.903 1.903 4.093 2.854 6.567 2.854s4.664-.951 6.567-2.854l112.204-112.202 112.208 112.209c1.902 1.903 4.093 2.848 6.563 2.848 2.478 0 4.668-.951 6.57-2.848l14.274-14.277c1.902-1.902 2.847-4.093 2.847-6.566.001-2.476-.944-4.666-2.846-6.569z"/>
</svg>
        </span>
    </div>

    </div>
</div>
                        </div>
                    </div>
                </article>

                <div class="box _ads">
                    
                    <!-- DevGang article item -->
                    <ins class="adsbygoogle"
                         style="display:block"
                         data-ad-client="ca-pub-5884869694377550"
                         data-ad-slot="5710776197"
                         data-ad-format="auto"
                         data-full-width-responsive="true"></ins>
                </div>

                <div class="article__comment">
                    
    

    <div class="box ">
        <div class="box__header">
            Комментарии 
            
        </div>
        
        <div class="comment-box">
            <div class="comment-box__list">
                
            </div>

            
                
            
    <div>
        
            Чтобы оставить комментарий, необходимо <a href="#" class="js-header__auth">авторизоваться</a>
        
    </div>

            
        </div>
    </div>

                </div>

                
            </div>
            <div class="span-4">
                <div class="box _block text-center">
    
    <p>Присоединяйся в тусовку</p>

    <div class="social">
    <a href="https://vk.com/devgang" class="social__link _vk" target="_blank">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 511.962 511.962">
	<path d="M507.399,370.471c-1.376-2.304-9.888-20.8-50.848-58.816c-42.88-39.808-37.12-33.344,14.528-102.176
		c31.456-41.92,44.032-67.52,40.096-78.464c-3.744-10.432-26.88-7.68-26.88-7.68l-76.928,0.448c0,0-5.696-0.768-9.952,1.76
		c-4.128,2.496-6.784,8.256-6.784,8.256s-12.192,32.448-28.448,60.032c-34.272,58.208-48,61.28-53.6,57.664
		c-13.024-8.416-9.76-33.856-9.76-51.904c0-56.416,8.544-79.936-16.672-86.016c-8.384-2.016-14.528-3.36-35.936-3.584
		c-27.456-0.288-50.72,0.096-63.872,6.528c-8.768,4.288-15.52,13.856-11.392,14.4c5.088,0.672,16.608,3.104,22.72,11.424
		c7.904,10.72,7.616,34.848,7.616,34.848s4.544,66.4-10.592,74.656c-10.4,5.664-24.64-5.888-55.2-58.72
		c-15.648-27.04-27.488-56.96-27.488-56.96s-2.272-5.568-6.336-8.544c-4.928-3.616-11.84-4.768-11.84-4.768l-73.152,0.448
		c0,0-10.976,0.32-15.008,5.088c-3.584,4.256-0.288,13.024-0.288,13.024s57.28,133.984,122.112,201.536
		c59.488,61.92,127.008,57.856,127.008,57.856h30.592c0,0,9.248-1.024,13.952-6.112c4.352-4.672,4.192-13.44,4.192-13.44
		s-0.608-41.056,18.464-47.104c18.784-5.952,42.912,39.68,68.48,57.248c19.328,13.28,34.016,10.368,34.016,10.368l68.384-0.96
		C488.583,400.807,524.359,398.599,507.399,370.471z"/>
</svg>
    </a>
    <a href="https://www.facebook.com/DevGang-959686350812346" class="social__link _fb" target="_blank">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
	<path d="M288,176v-64c0-17.664,14.336-32,32-32h32V0h-64c-53.024,0-96,42.976-96,96v80h-64v80h64v256h96V256h64l32-80H288z"/>
</svg>
    </a>
    <a href="https://t.me/devgang" class="social__link _tg" target="_blank">
        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 300 300" style="enable-background:new 0 0 300 300;" xml:space="preserve">
<g id="XMLID_496_">
	<path id="XMLID_497_" d="M5.299,144.645l69.126,25.8l26.756,86.047c1.712,5.511,8.451,7.548,12.924,3.891l38.532-31.412
		c4.039-3.291,9.792-3.455,14.013-0.391l69.498,50.457c4.785,3.478,11.564,0.856,12.764-4.926L299.823,29.22
		c1.31-6.316-4.896-11.585-10.91-9.259L5.218,129.402C-1.783,132.102-1.722,142.014,5.299,144.645z M96.869,156.711l135.098-83.207
		c2.428-1.491,4.926,1.792,2.841,3.726L123.313,180.87c-3.919,3.648-6.447,8.53-7.163,13.829l-3.798,28.146
		c-0.503,3.758-5.782,4.131-6.819,0.494l-14.607-51.325C89.253,166.16,91.691,159.907,96.869,156.711z"/>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg>
    </a>
    <a href="/feed/rss/" class="social__link _rss" target="_blank">
        <svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 448 448" style="enable-background:new 0 0 448 448;" xml:space="preserve">
<g>
	<g>
		<circle cx="64" cy="384" r="64"/>
	</g>
</g>
<g>
	<g>
		<path d="M0,149.344v85.344c117.632,0,213.344,95.68,213.344,213.312h85.312C298.656,283.328,164.672,149.344,0,149.344z"/>
	</g>
</g>
<g>
	<g>
		<path d="M0,0v85.344C200,85.344,362.688,248,362.688,448H448C448,200.96,247.04,0,0,0z"/>
	</g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg>
    </a>
</div>
</div>
                <div class="box _block text-center">
    <p>Поделитесь своим опытом, расскажите о новом инструменте, библиотеке или фреймворке. Для этого не обязательно становится постоянным автором.</p>
    
        <span class="button js-header__auth">Попробовать</span>
    
</div>

                <div class="box _block">
                    <div class="box__header">Возможно вам понравится</div>

                    
                    <div>
                        <a href="/article/testirovanie-cepoczek-celery-pqfjubmoas/">Тестирование цепочек Celery</a>
                    </div>
                    
                    <div>
                        <a href="/article/python-dlja-nlp-slovarnyi-zapas-i-slovosoczetanie-s-spacy-vvjd9f7emg/">Использование Python для задач NLP: работа с словарным запасом и поиск соответствия фраз с помощью библиотеки SpaCy</a>
                    </div>
                    
                    <div>
                        <a href="/article/izuczaem-go---sborka-devlog-czast-01-gcfv3y24lf/">Изучаем Go - Сборка DevLog Часть 01</a>
                    </div>
                    
                </div>

                <div class="sticky">
                    
    

    
        
    <div class="box _block text-center app-ad" data-path="">
        
            <img src="/static/icons/ad.svg"/>
            <p>В этом месте могла бы быть ваша реклама</p>
            <a href="/ad/" class="button">
                Разместить рекламу
            </a>
        
    </div>

    

    

    

    

                    
    

    

    
        
    <div class="app-ad-link">
        
            <div class="app-ad-link__item app-ad" data-path="867nv">
                <div class="app-ad-link__image">
                    
                        <img src="/static//storage/4630433894475110805661164097922154247.ico"/>
                    
                </div>

                <a href="/s/867nv/" class="app-ad-link__link">Домен с 5% скидкой</a>

                
                    <div class="app-ad-link__description">Зарегистрируйся и получи скидку на первый домен</div>
                
            </div>
        
            <div class="app-ad-link__item app-ad" data-path="25t52">
                <div class="app-ad-link__image">
                    
                        <img src="/static//storage/250511394015149637438227018458787635571.ico"/>
                    
                </div>

                <a href="/s/25t52/" class="app-ad-link__link">25% на первый месяц аренды VPS</a>

                
                    <div class="app-ad-link__description">Виртуальный сервер
по цене обычного хостинга
</div>
                
            </div>
        
    </div>

    

    

                </div>

                
            </div>
        </div>
    </div>

    
    

    


                        </div>
                    </div>

                    <div class="base__footer">
                        <div class="footer">
    <div class="wrap">
        <div class="footer__link">
            <a href="/chpu-translit/">Генератор ЧПУ</a>
            <a href="/doc/">Библиотека переводов</a>
            
        </div>
    </div>

    <div class="footer__meta">
        <div class="wrap">
            <div class="footer__meta-inner">
                <a href="/" class="footer__logo">DevGang</a>

                <div class="footer__support">
                    <div>Служба поддержки</div>
                    <a href="mailto:support@dev-gang.ru">support@dev-gang.ru</a>
                </div>

                <div class="footer__social">
                    <div class="social">
    <a href="https://vk.com/devgang" class="social__link _vk" target="_blank">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 511.962 511.962">
	<path d="M507.399,370.471c-1.376-2.304-9.888-20.8-50.848-58.816c-42.88-39.808-37.12-33.344,14.528-102.176
		c31.456-41.92,44.032-67.52,40.096-78.464c-3.744-10.432-26.88-7.68-26.88-7.68l-76.928,0.448c0,0-5.696-0.768-9.952,1.76
		c-4.128,2.496-6.784,8.256-6.784,8.256s-12.192,32.448-28.448,60.032c-34.272,58.208-48,61.28-53.6,57.664
		c-13.024-8.416-9.76-33.856-9.76-51.904c0-56.416,8.544-79.936-16.672-86.016c-8.384-2.016-14.528-3.36-35.936-3.584
		c-27.456-0.288-50.72,0.096-63.872,6.528c-8.768,4.288-15.52,13.856-11.392,14.4c5.088,0.672,16.608,3.104,22.72,11.424
		c7.904,10.72,7.616,34.848,7.616,34.848s4.544,66.4-10.592,74.656c-10.4,5.664-24.64-5.888-55.2-58.72
		c-15.648-27.04-27.488-56.96-27.488-56.96s-2.272-5.568-6.336-8.544c-4.928-3.616-11.84-4.768-11.84-4.768l-73.152,0.448
		c0,0-10.976,0.32-15.008,5.088c-3.584,4.256-0.288,13.024-0.288,13.024s57.28,133.984,122.112,201.536
		c59.488,61.92,127.008,57.856,127.008,57.856h30.592c0,0,9.248-1.024,13.952-6.112c4.352-4.672,4.192-13.44,4.192-13.44
		s-0.608-41.056,18.464-47.104c18.784-5.952,42.912,39.68,68.48,57.248c19.328,13.28,34.016,10.368,34.016,10.368l68.384-0.96
		C488.583,400.807,524.359,398.599,507.399,370.471z"/>
</svg>
    </a>
    <a href="https://www.facebook.com/DevGang-959686350812346" class="social__link _fb" target="_blank">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
	<path d="M288,176v-64c0-17.664,14.336-32,32-32h32V0h-64c-53.024,0-96,42.976-96,96v80h-64v80h64v256h96V256h64l32-80H288z"/>
</svg>
    </a>
    <a href="https://t.me/devgang" class="social__link _tg" target="_blank">
        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 300 300" style="enable-background:new 0 0 300 300;" xml:space="preserve">
<g id="XMLID_496_">
	<path id="XMLID_497_" d="M5.299,144.645l69.126,25.8l26.756,86.047c1.712,5.511,8.451,7.548,12.924,3.891l38.532-31.412
		c4.039-3.291,9.792-3.455,14.013-0.391l69.498,50.457c4.785,3.478,11.564,0.856,12.764-4.926L299.823,29.22
		c1.31-6.316-4.896-11.585-10.91-9.259L5.218,129.402C-1.783,132.102-1.722,142.014,5.299,144.645z M96.869,156.711l135.098-83.207
		c2.428-1.491,4.926,1.792,2.841,3.726L123.313,180.87c-3.919,3.648-6.447,8.53-7.163,13.829l-3.798,28.146
		c-0.503,3.758-5.782,4.131-6.819,0.494l-14.607-51.325C89.253,166.16,91.691,159.907,96.869,156.711z"/>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg>
    </a>
    <a href="/feed/rss/" class="social__link _rss" target="_blank">
        <svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 448 448" style="enable-background:new 0 0 448 448;" xml:space="preserve">
<g>
	<g>
		<circle cx="64" cy="384" r="64"/>
	</g>
</g>
<g>
	<g>
		<path d="M0,149.344v85.344c117.632,0,213.344,95.68,213.344,213.312h85.312C298.656,283.328,164.672,149.344,0,149.344z"/>
	</g>
</g>
<g>
	<g>
		<path d="M0,0v85.344C200,85.344,362.688,248,362.688,448H448C448,200.96,247.04,0,0,0z"/>
	</g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg>
    </a>
</div>
                </div>
            </div>
        </div>
    </div>
</div>
                    </div>
                
            </div>
        

        <div class="loader">
            <div class="loader__inner"></div>
        </div>

        
            <script src="/static/highlight/highlight.pack.js?q=1595359497.985594"></script>
            <script src="/static/bundle/core.js?q=1595359497.985594"></script>
        


        
            

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<script src="//yastatic.net/es5-shims/0.0.2/es5-shims.min.js"></script>
<script src="//yastatic.net/share2/share.js"></script>




<!-- Yandex.Metrika counter -->
<script type="text/javascript" >
   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
   m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

   ym(47901371, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true,
        webvisor:true
   });
</script>
<noscript><div><img src="https://mc.yandex.ru/watch/47901371" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->



<div style="display: none;">
    <!--LiveInternet counter--><script type="text/javascript">
    document.write("<a href='//www.liveinternet.ru/click' "+
    "target=_blank><img src='//counter.yadro.ru/hit?t26.6;r"+
    escape(document.referrer)+((typeof(screen)=="undefined")?"":
    ";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
    screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
    ";h"+escape(document.title.substring(0,150))+";"+Math.random()+
    "' alt='' title='LiveInternet: показано число посетителей за"+
    " сегодня' "+
    "border='0' width='88' height='15'><\/a>")
    </script><!--/LiveInternet-->
</div>
        

    </body>
</html>https://learn.javascript.ru/prototype-inheritance
https://dev-gang.ru/article/golang-making-http-requests/
